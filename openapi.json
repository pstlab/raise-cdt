{
    "components": {
        "schemas": {
            "data": {
                "description": "A data entry containing dynamic values and associated metadata for an item.",
                "properties": {
                    "data": {
                        "description": "Dynamic data of the item defined by its type.",
                        "type": "object"
                    },
                    "timestamp": {
                        "description": "Unix timestamp in milliseconds when this data was recorded.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "data",
                    "timestamp"
                ],
                "type": "object"
            },
            "float_property": {
                "description": "A property that holds floating-point numbers, with optional constraints and default values.",
                "properties": {
                    "default": {
                        "description": "Default value(s) for this property.",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "items": {
                                    "type": "number"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "max": {
                        "description": "Maximum allowed value for this property.",
                        "type": "number"
                    },
                    "min": {
                        "description": "Minimum allowed value for this property.",
                        "type": "number"
                    },
                    "multiple": {
                        "description": "Whether this property can hold multiple values (array).",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The property type identifier.",
                        "enum": [
                            "float"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "int_property": {
                "description": "A property that holds integer values, with optional constraints and default values.",
                "properties": {
                    "default": {
                        "description": "Default value(s) for this property.",
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "max": {
                        "description": "Maximum allowed value for this property.",
                        "type": "integer"
                    },
                    "min": {
                        "description": "Minimum allowed value for this property.",
                        "type": "integer"
                    },
                    "multiple": {
                        "description": "Whether this property can hold multiple values (array).",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The property type identifier.",
                        "enum": [
                            "int"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "item": {
                "description": "A RAISE-CDT item is an instance of a type, which can have static properties and dynamic data.",
                "properties": {
                    "id": {
                        "description": "The ID for this item.",
                        "pattern": "^[a-fA-F0-9]{24}$",
                        "type": "string"
                    },
                    "properties": {
                        "description": "Static data of the item defined by its type.",
                        "type": "object"
                    },
                    "type": {
                        "description": "The name of the type that this item instantiates.",
                        "type": "string"
                    },
                    "value": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/data"
                        },
                        "description": "Dynamic data of the item defined by its type.",
                        "type": "object"
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "type": "object"
            },
            "item_property": {
                "description": "A property that holds references to other items by their ID, restricted to a specific domain type.",
                "properties": {
                    "default": {
                        "description": "Default ID value(s) for this property.",
                        "oneOf": [
                            {
                                "pattern": "^[a-fA-F0-9]{24}$",
                                "type": "string"
                            },
                            {
                                "items": {
                                    "pattern": "^[a-fA-F0-9]{24}$",
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "domain": {
                        "description": "The type of objects that are allowed as values for this property.",
                        "type": "string"
                    },
                    "multiple": {
                        "description": "Whether this property can hold multiple values (array).",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The property type identifier.",
                        "enum": [
                            "item"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "domain"
                ],
                "type": "object"
            },
            "json_property": {
                "description": "A property that holds arbitrary JSON objects conforming to a specified JSON schema.",
                "properties": {
                    "default": {
                        "description": "Default JSON object for this property.",
                        "type": "object"
                    },
                    "schema": {
                        "description": "The JSON schema that validates the property's value.",
                        "type": "object"
                    },
                    "type": {
                        "description": "The property type identifier.",
                        "enum": [
                            "json"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "schema"
                ],
                "type": "object"
            },
            "property": {
                "description": "A property definition that can be one of several types: integer, float, string, symbol, item reference, or JSON object.",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/int_property"
                    },
                    {
                        "$ref": "#/components/schemas/float_property"
                    },
                    {
                        "$ref": "#/components/schemas/string_property"
                    },
                    {
                        "$ref": "#/components/schemas/symbol_property"
                    },
                    {
                        "$ref": "#/components/schemas/item_property"
                    },
                    {
                        "$ref": "#/components/schemas/json_property"
                    }
                ]
            },
            "reactive_rule": {
                "description": "A reactive rule is a CLIPS rule that can be triggered by changes in the system.",
                "properties": {
                    "content": {
                        "description": "The content of the reactive rule in CLIPS format.",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "content"
                ],
                "type": "object"
            },
            "string_property": {
                "description": "A property that holds string values, with optional default values.",
                "properties": {
                    "default": {
                        "description": "Default value(s) for this property.",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "multiple": {
                        "description": "Whether this property can hold multiple values (array).",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The property type identifier.",
                        "enum": [
                            "string"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "symbol_property": {
                "description": "A property that holds predefined symbolic values from a restricted set of allowed values.",
                "properties": {
                    "default": {
                        "description": "Default value(s) for this property.",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "multiple": {
                        "description": "Whether this property can hold multiple values (array).",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The property type identifier.",
                        "enum": [
                            "symbol"
                        ],
                        "type": "string"
                    },
                    "values": {
                        "description": "The allowed symbolic values for this property.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "type": {
                "description": "A RAISE-CDT type definition that describes the structure and behavior of items.",
                "properties": {
                    "data": {
                        "description": "Additional metadata or configuration data for this type.",
                        "type": "object"
                    },
                    "dynamic_properties": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/property"
                        },
                        "description": "Object containing dynamic properties that can store time-series data for items of this type. Keys are property names, values are property definitions.",
                        "type": "object"
                    },
                    "name": {
                        "description": "The unique name identifier for this type.",
                        "type": "string"
                    },
                    "parents": {
                        "description": "Array of parent type names from which this type inherits properties.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "static_properties": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/property"
                        },
                        "description": "Object containing static properties that define the fixed structure of items of this type. Keys are property names, values are property definitions.",
                        "type": "object"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            }
        }
    },
    "info": {
        "description": "RESTful API for the RAISE-CDT server. This API provides comprehensive management of types, items, dynamic data, and reactive rules. Types define the structure and behavior of items, items are instances of types with static properties, and dynamic data provides time-series storage capabilities. Reactive rules enable event-driven processing using CLIPS rule engine.",
        "title": "RAISE-CDT Server API",
        "version": "1.0.0"
    },
    "openapi": "3.1.0",
    "paths": {
        "/data/{id}": {
            "get": {
                "description": "Endpoint to fetch data for a specific item by ID. You can filter data by providing 'from' and 'to' query parameters.",
                "parameters": [
                    {
                        "description": "The ID of the RAISE-CDT item.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[a-fA-F0-9]{24}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for filtering data.",
                        "in": "query",
                        "name": "from",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for filtering data.",
                        "in": "query",
                        "name": "to",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/data"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the item data."
                    },
                    "404": {
                        "description": "Item not found."
                    }
                },
                "summary": "Retrieve data for a specific RAISE-CDT item."
            },
            "post": {
                "description": "Endpoint to add data to a specific item by ID. You can provide a timestamp for the data.",
                "parameters": [
                    {
                        "description": "The ID of the RAISE-CDT item.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[a-fA-F0-9]{24}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Timestamp for the data.",
                        "in": "query",
                        "name": "timestamp",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/data"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Data added successfully."
                    },
                    "404": {
                        "description": "Item not found."
                    }
                },
                "summary": "Add data to a specific RAISE-CDT item."
            }
        },
        "/fake/{type}": {
            "get": {
                "description": "Endpoint to generate fake data for testing purposes.",
                "parameters": [
                    {
                        "description": "The RAISE-CDT type of fake data to generate.",
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The names of the dynamic parameters to generate fake values for. If omitted, all dynamic parameters will be generated.",
                        "explode": false,
                        "in": "query",
                        "name": "parameters",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Successful response with the generated fake data."
                    }
                },
                "summary": "Generate fake data for testing."
            }
        },
        "/fcm_tokens": {
            "post": {
                "description": "Endpoint to add a new FCM token for a user.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "id": {
                                        "description": "User ID",
                                        "type": "string"
                                    },
                                    "token": {
                                        "description": "FCM token",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Token added successfully."
                    },
                    "400": {
                        "description": "Invalid request."
                    }
                },
                "summary": "Add a new FCM token."
            }
        },
        "/items": {
            "get": {
                "description": "Endpoint to fetch all the managed items. You can filter items by type and other properties using query parameters.",
                "parameters": [
                    {
                        "description": "Filter items by type name.",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter items by specific properties.",
                        "explode": true,
                        "in": "query",
                        "name": "\"\"",
                        "required": false,
                        "schema": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/item"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response containing an array of all managed items with their properties and metadata."
                    },
                    "404": {
                        "description": "Type not found"
                    }
                },
                "summary": "Retrieve all the RAISE-CDT items."
            },
            "post": {
                "description": "Endpoint to create a new item.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/item"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "description": "The ID of the newly created item.",
                                    "pattern": "^[a-fA-F0-9]{24}$",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Item created successfully."
                    }
                },
                "summary": "Create a new RAISE-CDT item."
            }
        },
        "/items/{id}": {
            "delete": {
                "description": "Endpoint to delete a specific item by ID.",
                "parameters": [
                    {
                        "description": "The ID of the specific RAISE-CDT item to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[a-fA-F0-9]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Item deleted successfully"
                    },
                    "404": {
                        "description": "Item not found"
                    }
                },
                "summary": "Delete a specific RAISE-CDT item."
            },
            "get": {
                "description": "Endpoint to fetch a specific item by ID.",
                "parameters": [
                    {
                        "description": "The ID of the specific RAISE-CDT item to get.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[a-fA-F0-9]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        },
                        "description": "Successful response with the item details."
                    },
                    "404": {
                        "description": "Item not found"
                    }
                },
                "summary": "Retrieve a specific RAISE-CDT item."
            },
            "patch": {
                "description": "Endpoint to update a specific item by ID. You can provide partial updates for the item's properties.",
                "parameters": [
                    {
                        "description": "The ID of the specific RAISE-CDT item to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[a-fA-F0-9]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/item"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Item updated successfully."
                    },
                    "404": {
                        "description": "Item not found"
                    }
                },
                "summary": "Update a specific RAISE-CDT item."
            }
        },
        "/reactive_rules": {
            "get": {
                "description": "Endpoint to fetch all the reactive rules.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/reactive_rule"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response with the stored reactive rules."
                    }
                },
                "summary": "Retrieve all the RAISE-CDT reactive rules."
            },
            "post": {
                "description": "Endpoint to create a new reactive rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/reactive_rule"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Reactive rule created successfully."
                    }
                },
                "summary": "Create a new RAISE-CDT reactive rule."
            }
        },
        "/types": {
            "get": {
                "description": "Endpoint to fetch all the managed types.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/type"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Successful response containing an array of all managed types with their complete definitions."
                    }
                },
                "summary": "Retrieve all the RAISE-CDT types."
            },
            "post": {
                "description": "Endpoint to create a new type.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/type"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Type created successfully."
                    }
                },
                "summary": "Create a new RAISE-CDT type."
            }
        },
        "/types/{name}": {
            "delete": {
                "description": "Endpoint to delete a specific type by name.",
                "parameters": [
                    {
                        "description": "The name of the specific RAISE-CDT type to delete.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Type deleted successfully"
                    },
                    "404": {
                        "description": "Type not found"
                    }
                },
                "summary": "Delete a specific RAISE-CDT type."
            },
            "get": {
                "description": "Endpoint to fetch a specific type by name.",
                "parameters": [
                    {
                        "description": "The name of the specific RAISE-CDT type to get.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/type"
                                }
                            }
                        },
                        "description": "Successful response with the type details."
                    },
                    "404": {
                        "description": "Type not found"
                    }
                },
                "summary": "Retrieve a specific RAISE-CDT type."
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user with the specified Keycloak ID.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "keycloak_id": {
                                        "description": "The Keycloak ID for the new user.",
                                        "format": "uuid",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "keycloak_id"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "description": "The ID of the newly created item.",
                                    "pattern": "^[a-fA-F0-9]{24}$",
                                    "type": "string"
                                }
                            }
                        },
                        "description": "User created successfully."
                    },
                    "400": {
                        "description": "Invalid request."
                    },
                    "409": {
                        "description": "User already exists."
                    }
                },
                "summary": "Create User"
            }
        },
        "/users/{keycloak_id}": {
            "get": {
                "description": "Retrieves a user by their Keycloak ID.",
                "parameters": [
                    {
                        "description": "The Keycloak ID of the user to retrieve.",
                        "in": "path",
                        "name": "keycloak_id",
                        "required": true,
                        "schema": {
                            "format": "uuid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        },
                        "description": "User retrieved successfully."
                    },
                    "404": {
                        "description": "User not found."
                    }
                },
                "summary": "Get User"
            }
        }
    }
}