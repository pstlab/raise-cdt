cmake_minimum_required(VERSION 3.21)
project(RAISE-CDT VERSION 0.2.0 LANGUAGES CXX)

include(CTest)
enable_testing()

set(COCO_NAME "RAISE-CDT" CACHE STRING "The CoCo Application Name" FORCE)
set(BUILD_MONGODB ON CACHE BOOL "Build MongoDB connection" FORCE)
set(MONGODB_AUTH ON CACHE BOOL "Build MongoDB authentication" FORCE)
set(MONGODB_USER "root" CACHE STRING "The MongoDB User")
set(MONGODB_PASSWORD "password" CACHE STRING "The MongoDB Password")
option(BUILD_POSTGRESQL "Build PostgreSQL connection" OFF)
if(BUILD_POSTGRESQL)
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(PQXX REQUIRED libpqxx)
    include_directories(${PQXX_INCLUDE_DIRS})

    set(POSTGRESQL_HOST "localhost" CACHE STRING "The PostgreSQL Host")
    set(POSTGRESQL_PORT "5432" CACHE STRING "The PostgreSQL Port")
    set(POSTGRESQL_USER "account" CACHE STRING "The PostgreSQL User")
    set(POSTGRESQL_PASSWORD "yourpassword" CACHE STRING "The PostgreSQL Password")
endif()
set(BUILD_FCM ON CACHE BOOL "Build Firebase Cloud Messaging" FORCE)
set(BUILD_MQTT ON CACHE BOOL "Build MQTT middleware" FORCE)
set(MQTT_AUTH ON CACHE BOOL "Build MQTT authentication" FORCE)
set(MQTT_USER "mqtt_user" CACHE STRING "The MQTT User")
set(MQTT_PASSWORD "mqtt_password" CACHE STRING "The MQTT Password")
set(BUILD_LLM ON CACHE BOOL "Build CoCo LLM" FORCE)
set(BUILD_COCO_SERVER ON CACHE BOOL "Build the CoCo server" FORCE)
set(ENABLE_CORS ON CACHE BOOL "Enable CORS middleware" FORCE)
set(LOGGING_LEVEL "DEBUG" CACHE STRING "Logging level (DEBUG, INFO, WARN, ERROR)" FORCE)

message(STATUS "Build PostgreSQL connection: ${BUILD_POSTGRESQL}")
if(BUILD_POSTGRESQL)
    message(STATUS "PostgreSQL Host: ${POSTGRESQL_HOST}")
    message(STATUS "PostgreSQL Port: ${POSTGRESQL_PORT}")
endif()

add_executable(raise-cdt src/main.cpp src/raise_cdt.cpp src/raise_cdt_server.cpp src/raise_cdt_db.cpp src/raise_cdt_mqtt.cpp)
target_compile_definitions(raise-cdt PUBLIC MONGODB_USER="${MONGODB_USER}" MONGODB_PASSWORD="${MONGODB_PASSWORD}" MQTT_USER="${MQTT_USER}" MQTT_PASSWORD="${MQTT_PASSWORD}")
target_compile_features(raise-cdt PUBLIC cxx_std_17)
target_include_directories(raise-cdt PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
if(NOT TARGET CoCo)
    add_subdirectory(extern/coco)
endif()
add_dependencies(raise-cdt CoCo)
target_link_libraries(raise-cdt PUBLIC CoCo)

if(BUILD_POSTGRESQL)
    target_sources(raise-cdt PRIVATE src/raise_db.cpp)
    target_compile_definitions(raise-cdt PUBLIC BUILD_POSTGRESQL POSTGRESQL_HOST="${POSTGRESQL_HOST}" POSTGRESQL_PORT="${POSTGRESQL_PORT}" POSTGRESQL_USER="${POSTGRESQL_USER}" POSTGRESQL_PASSWORD="${POSTGRESQL_PASSWORD}")
    target_link_libraries(raise-cdt PUBLIC ${PQXX_LIBRARIES})
endif()

setup_sanitizers(raise-cdt)

set(CPACK_PROJECT_NAME json)
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)